LUT: process (OPCODE, FUNC) is begin

		if (OPCODE = RTYPE) then
			case FUNC is
				when RTYPE_ADD =>
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '1';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= REGISTER_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when RTYPE_SUB =>
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '1';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= REGISTER_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '1';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when RTYPE_AND =>
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '1';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= REGISTER_SELECT;
					s_alu1 <= '1';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when RTYPE_OR =>
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '1';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= REGISTER_SELECT;
					s_alu1 <= '1';
					s_alu2 <= '1';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when others =>
					---- stage 1
					s_en1  <= '0';
					s_rf1  <= '0';
					s_rf2  <= '0';
					---- stage 2
					s_en2  <= '0';
					s_s1   <= '0';
					s_s2   <= '0';
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '0';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= '0';
					s_wf1  <= '0';
					----
			end case;
		else
			case OPCODE is
				when ITYPE_ADDI1  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '0';
					s_rf2  <= '1';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= INPUT_SELECT;
					s_s2   <= REGISTER_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_SUBI1  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '0';
					s_rf2  <= '1';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= INPUT_SELECT;
					s_s2   <= REGISTER_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '1';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_ANDI1  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '0';
					s_rf2  <= '1';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= INPUT_SELECT;
					s_s2   <= REGISTER_SELECT;
					s_alu1 <= '1';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_ORI1  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '0';
					s_rf2  <= '1';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= INPUT_SELECT;
					s_s2   <= REGISTER_SELECT;
					s_alu1 <= '1';
					s_alu2 <= '1';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_ADDI2  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '0';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= INPUT_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_SUBI2  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '0';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= INPUT_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '1';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_ANDI2  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '0';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= INPUT_SELECT;
					s_alu1 <= '1';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_ORI2  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '0';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= INPUT_SELECT;
					s_alu1 <= '1';
					s_alu2 <= '1';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_MOV  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '0';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= INPUT_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_S_REG1  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '0';
					s_rf2  <= '0';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= INPUT_SELECT;
					s_s2   <= INPUT_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';

				when ITYPE_S_REG2  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '0';
					s_rf2  <= '0';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= INPUT_SELECT;
					s_s2   <= INPUT_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= ALU_OUT_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_S_MEM2  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '1';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= INPUT_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '0';
					s_wm   <= '1';
					s_s3   <= MEMORY_SELECT;
					s_wf1  <= '0';
					----
				when ITYPE_L_MEM1  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '0';
					s_rf2  <= '1';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= INPUT_SELECT;
					s_s2   <= REGISTER_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '1';
					s_wm   <= '0';
					s_s3   <= MEMORY_SELECT;
					s_wf1  <= '1';
					----
				when ITYPE_L_MEM2  => 
					---- stage 1
					s_en1  <= '1';
					s_rf1  <= '1';
					s_rf2  <= '0';
					---- stage 2
					s_en2  <= '1';
					s_s1   <= REGISTER_SELECT;
					s_s2   <= INPUT_SELECT;
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '1';
					s_rm   <= '1';
					s_wm   <= '0';
					s_s3   <= MEMORY_SELECT;
					s_wf1  <= '1';
					-----
				when others  =>
					---- stage 1
					s_en1  <= '0';
					s_rf1  <= '0';
					s_rf2  <= '0';
					---- stage 2
					s_en2  <= '0';
					s_s1   <= '0';
					s_s2   <= '0';
					s_alu1 <= '0';
					s_alu2 <= '0';
					---- stage 3
					s_en3  <= '0';
					s_rm   <= '0';
					s_wm   <= '0';
					s_s3   <= '0';
					s_wf1  <= '0';
					-----
			end case;
		end if;

	end process;
