##############################################################
#SCRIPT FOR SPEEDING UP and RECORDING the MULTIPLIER SYNTHESIS#
# analyzing and checking vhdl netlist#
# here the analyze command is used for each file from bottom to top #
##############################################################
analyze -library WORK -format vhdl {constants.vhd}
analyze -library WORK -format vhdl {fa.vhd}
# fill these lines with your files ...
analyze -library WORK -format vhdl {rca_generic.vhd}
analyze -library WORK -format vhdl {mux51_generic.vhd}
analyze -library WORK -format vhdl {booth_encoder_unit.vhd}
analyze -library WORK -format vhdl {boothmul.vhd}
##############################################################

###### 8 BITS
# elaborating the top entity -- here supposed BOOTHMUL#
# choose the architecture you want
elaborate BOOTHMUL -architecture STRUCTURAL -parameters "N = 8"
##########################################
# first compilation, without constraints #
compile 
# reporting riming and power after the first synthesis without constraints #
report_timing > BOOTHMUL_n8_timeopt_1t.rpt
report_area > BOOTHMUL_n8_timeopt_1a.rpt
# forces a combinational max delay of REQUIRED_TIME from each of the inputs
# to each of th eoutput, that is a delay lower than the one found after
# the first compilation step #
# often this is the working clock period of your system #
set_max_delay 1.0 -from [all_inputs] -to [all_outputs]
# optimize
compile -map_effort high
# save report
report_timing > BOOTHMUL_n8_timeopt_2t.rpt
report_area > BOOTHMUL_n8_timeopt_2a.rpt
# saving files
write -hierarchy -format ddc -output BOOTHMUL-n8-structural-topt.ddc
write -hierarchy -format vhdl -output BOOTHMUL-n8-structural-topt.vhdl
write -hierarchy -format verilog -output BOOTHMUL-n8-structural-topt.v

###### 32 BITS
# elaborating the top entity -- here supposed BOOTHMUL#
# choose the architecture you want
elaborate BOOTHMUL -architecture STRUCTURAL -parameters "N = 32"
##########################################
# first compilation, without constraints #
compile 
# reporting riming and power after the first synthesis without constraints #
report_timing > BOOTHMUL_n32_timeopt_1t.rpt
report_area > BOOTHMUL_n32_timeopt_1a.rpt
# forces a combinational max delay of REQUIRED_TIME from each of the inputs
# to each of th eoutput, that is a delay lower than the one found after
# the first compilation step #
# often this is the working clock period of your system #
set_max_delay 1.0 -from [all_inputs] -to [all_outputs]
# optimize
compile -map_effort high
# save report
report_timing > BOOTHMUL_n32_timeopt_2t.rpt
report_area > BOOTHMUL_n32_timeopt_2a.rpt
# saving files
write -hierarchy -format ddc -output BOOTHMUL-n32-structural-topt.ddc
write -hierarchy -format vhdl -output BOOTHMUL-n32-structural-topt.vhdl
write -hierarchy -format verilog -output BOOTHMUL-n32-structural-topt.v
